/** @typedef {typeof __propDef.props}  AddressProps */
/** @typedef {typeof __propDef.events}  AddressEvents */
/** @typedef {typeof __propDef.slots}  AddressSlots */
export default class Address extends SvelteComponentTyped<{
    allowedCountries: string[];
    blockPoBox: boolean;
    defaultValues: {
        name?: string;
        firstName?: string;
        lastName?: string;
        address?: {
            line1?: string;
            line2?: string;
            city?: string;
            state?: string;
            postal_code?: string;
            country: string;
        };
        phone?: string;
    };
    fields: {
        phone?: "auto" | "never" | "always";
    };
    validation: {
        phone?: {
            required: "auto" | "never" | "always";
        };
    };
    contacts: import("@stripe/stripe-js").ContactOption[];
    display: {
        name?: "split" | "full" | "organization";
    };
    mode?: import("@stripe/stripe-js").AddressMode;
    autocomplete?: {
        mode: "automatic";
    } | {
        mode: "disabled";
    } | {
        mode: "google_maps_api";
        apiKey: string;
    };
    focus?: () => void;
    blur?: () => void;
    clear?: () => void;
    destroy?: () => void;
}, {
    [evt: string]: CustomEvent<any>;
}, {}> {
    get blur(): () => void;
    get clear(): () => void;
    get destroy(): () => void;
    get focus(): () => void;
}
export type AddressProps = typeof __propDef.props;
export type AddressEvents = typeof __propDef.events;
export type AddressSlots = typeof __propDef.slots;
import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        allowedCountries: string[];
        blockPoBox: boolean;
        defaultValues: {
            name?: string;
            firstName?: string;
            lastName?: string;
            address?: {
                line1?: string;
                line2?: string;
                city?: string;
                state?: string;
                postal_code?: string;
                country: string;
            };
            phone?: string;
        };
        fields: {
            phone?: "auto" | "never" | "always";
        };
        validation: {
            phone?: {
                required: "auto" | "never" | "always";
            };
        };
        contacts: import("@stripe/stripe-js").ContactOption[];
        display: {
            name?: "split" | "full" | "organization";
        };
        mode?: import("@stripe/stripe-js").AddressMode;
        autocomplete?: {
            mode: "automatic";
        } | {
            mode: "disabled";
        } | {
            mode: "google_maps_api";
            apiKey: string;
        };
        focus?: () => void;
        blur?: () => void;
        clear?: () => void;
        destroy?: () => void;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export {};
